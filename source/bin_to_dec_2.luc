module bin_to_dec_2 #(
    DIGITS = 4 : DIGITS > 0 && DIGITS < 20,          // limited by 64-bit constants
    LEADING_ZEROS = 0 : LEADING_ZEROS == 0 || LEADING_ZEROS == 1
)(
    input value[$clog2($pow(10, DIGITS)) + 1], // signed input (handles negatives)
    output digits[DIGITS][4],                         // decimal digits (BCD)
    output sign                                       // sign flag (1 for negative, 0 for positive)
) {
    always {
        digits = DIGITSx{{4d11}}                      // default invalid digits
        sign = 0                                      // default positive

        // Detect negative numbers (Two's complement)
        sig remainder[$width(value)] = value  // store original value
        if (value[$width(value) - 1]) {              // if MSB is 1, it's negative
            sign = 1                                 // set sign flag
            remainder = -value                       // convert to absolute value
        }

        sig blank = !LEADING_ZEROS                   // flag for leading zeros

        if (remainder < $pow(10, DIGITS)) {          // if within displayable range
            repeat(j, DIGITS, DIGITS-1, -1) {        // iterate over each digit
                sig scale[$width(remainder)] = $pow(10, j)

                if (remainder < scale) {             // if current digit is 0
                    if (j != 0 && blank)             // use 10 for blank
                        digits[j] = 10
                    else                             // otherwise use 0
                        digits[j] = 0
                } else {                             // digit is 1-9
                    blank = 0                        // stop blanking leading zeros
                    sig sub_value[$width(remainder)] = 0

                    repeat(i, 9, 9, -1) {            // determine digit
                        if (remainder < (i+1) * scale) {
                            digits[j] = i
                            sub_value = i * scale
                        }
                    }
                    remainder = remainder - sub_value // subtract extracted digit
                }
            }
        }
    }
}

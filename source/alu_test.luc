module alu_test (
    input clk,              // 100MHz clock
    input rst,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    output io_led[3][8],     // LEDs on IO Shield
    output io_segment[8],        // 7-segment LEDs on IO Shield
    output io_select[4],        // Digit select on IO Shield
    input io_button[5],      // 5 buttons on IO Shield
    input io_dip[3][8]       // DIP switches on IO Shield
) {    
    enum States {
        MANUAL,
        AUTO
    }
    
    const CLK_FREQ = $is_sim() ? 1000 : 10000000 // put 1000 for sim, 10000000 otherwise in hardware
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        edge_detector io_button_edge[5](#RISE(5x{{1}}), #FALL(5x{{0}}))
        button_conditioner io_button_cond[5](#CLK_FREQ(5x{{CLK_FREQ}})) 
        .rst(rst) {
            dff states[$width(States)](#INIT(States.MANUAL))
        }
    }
    
    //alu_manual_tester alu_manual(.clk(clk), .rst(rst), .io_button(io_button), .io_dip(io_dip), #CLK_FREQ(CLK_FREQ)) 
    alu_manual_tester alu_manual(
        .clk(clk), 
        .rst(rst), 
        .io_button(io_button), 
        .io_dip(io_dip)
    )
    alu_automatic_tester alu_auto(
        .clk(clk), 
        .rst(rst), 
        .io_button(io_button), 
        .io_dip(io_dip)
    )
    
    always {
        io_button_cond.in = io_button
        io_button_edge.in = io_button_cond.out
        
        led = 8h00             // turn LEDs off
        
        // defaults
        states.d = states.q
        io_segment = alu_manual.io_segment
        io_select = alu_manual.io_select         
        io_led = alu_manual.io_led
        led = alu_manual.led
        
        // to test ALU 
        // **Switch between Manual & Auto Test using io_button[2]**
        case (states.q){
            States.MANUAL: // Default to manual mode
                if (io_button_edge.out[2]) { // if lower button is pressed
                    states.d = States.AUTO
                } 
                else {
                    io_segment = alu_manual.io_segment
                    io_select = alu_manual.io_select         
                    io_led = alu_manual.io_led
                    led = alu_manual.led
                }
            
            States.AUTO: // display on seven-seg LED & io_led
                if (io_button_edge.out[2]) { // if lower button is pressed
                    states.d = States.MANUAL
                }
                io_led = alu_auto.io_led
                led = alu_auto.led
        } 
    }
}
module alu_automatic_tester_loop #(
    TEST_CASES = 10) // default
(
    input clk,
    input rst,
    input addr[TEST_CASES], // Address to select the test case
    input io_button[5],      // 5 buttons on IO Shield
    output a[32],     // Operand A
    output b[32],     // Operand B
    output alufn[6],  // ALU function code
    output expected_out[35], // Expected output (includes ZVN flags)
    output test_case_index[$clog2(TEST_CASES)] // Expose test case index
) {
    const SIZE = 32
    const CLK_FREQ = $is_sim() ? 1000 : 10000000 // put 1000 only for sim, 10M on hardware
    const SLOW_CLOCK_DEFAULT_SPEED = $is_sim() ? 8 : 28 // put 8  for sim, 28 for hardware
    
    alu_automatic_tester_rom rom
    sig slow_clock
    
    enum States {
        IDLE,
        TEST
    }
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        //reset_conditioner reset_cond
        
        edge_detector io_button_edge[5](#RISE(5x{{1}}), #FALL(5x{{0}}))
        //edge_detector slow_clock_edge(#RISE(1), #FALL(0))
        button_conditioner io_button_cond[5](#CLK_FREQ(5x{{CLK_FREQ}})) 
        .rst(rst) {
            
            dff states[$width(States)](#INIT(States.IDLE))
            //dff speed_pointer[$clog2(SIZE)](#INIT(SLOW_CLOCK_DEFAULT_SPEED)) //clog2(32) = 5
            dff test_counter[$clog2(TEST_CASES)](#INIT(0)); // Track test case index
            //dff slow_clock_enable(#INIT(0))
            //dff counter[SIZE]
        }
    }
    
    always {
        // condition the buttons, then take rising edges only
        io_button_cond.in = io_button
        io_button_edge.in = io_button_cond.out
        
        // connect dffs 
        //counter.d = counter.q + 1 // always increment
        states.d = states.q
        test_counter.d = test_counter.q
        //slow_clock_enable.d = slow_clock_enable.q
        
        // default connection
        rom.addr = 0
        a = 0
        b = 0
        alufn = 0
        expected_out = 0
        
        // signal connection
        test_case_index = test_counter.q // Output test case index
        //slow_clock = counter.q[speed_pointer.q] // pointed based on the bit of the counter 
        
        if (rst) {
            // Reset everything when rst is high
            states.d = States.IDLE;
            test_counter.d = 0;
        } else {
            case (states.q){ //states.q is current state, states.d is next state
                States.IDLE: 
                    if (io_button_edge.out[2]) { // if lower button is pressed
                        states.d = States.TEST
                    }
                
                States.TEST:
                    rom.addr = test_counter.q
                    a = rom.a
                    b = rom.b
                    alufn = rom.alufn
                    expected_out = rom.expected_out
    
                    if (test_counter.q < TEST_CASES - 1) {
                        test_counter.d = test_counter.q + 1; // Increment test case index
                    } else {
                        test_counter.d = 0; // Loop back
                    }
            }
        }
    }
}